<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Dashboard - Gestion des Stocks</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="" name="keywords">
    <meta content="" name="description">

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap" rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Leaflet Stylesheet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap" rel="stylesheet">
  
    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
    <!-- Libraries Stylesheet -->
    <link href="{{ asset('lib/lightbox/css/lightbox.min.css') }}" rel="stylesheet">
    <link href="{{ asset('lib/owlcarousel/assets/owl.carousel.min.css') }}" rel="stylesheet">
  
    <!-- Customized Bootstrap Stylesheet -->
    <link href="{{ asset('css/bootstrap.min.css') }}" rel="stylesheet">
  
    <!-- Template Stylesheet -->
    <link href="{{ asset('css/style.css') }}" rel="stylesheet">
    <link href="{{ asset('css/style.css')}}" rel="stylesheet">
    <link href="{{ asset('css/sidebar.css')}}" rel="stylesheet">
  
    <!-- DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">
  
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Bootstrap JS (avec Popper.js) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  

    <!-- Styles personnalisés minimaux -->
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Open Sans', sans-serif;
            background-color: #f4f4f4;
        }

        .main-content {
            margin-left: 250px;
            padding: 20px;
            background-color: #eeeeee;
            min-height: 100vh;
        }

        .sidebar {
            height: 100vh;
            width: 250px;
            position: fixed;
            top: 0;
            left: 0;
            padding-top: 20px;
            background-color: #2c3e50;
            color: #d1d1d1;
        }

        .sidebar a {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 18px;
            color: #d1d1d1;
            display: block;
            text-align: left;
        }

        .sidebar a:hover {
            color: #ffffff;
            background-color: #a0a0a0;
        }

        .card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background-color: #1e3a8a;
            color: #fff;
            padding: 15px;
            border-radius: 8px 8px 0 0;
        }

        .card-body {
            padding: 20px;
        }

        #map-container {
            margin-top: 15px;
            width: 100%;
            display: none;
        }

        #map {
            height: 500px;
            width: 100%;
            border-radius: 8px;
            background-color: #f0f0f0;
        }

        .form-label {
            font-weight: 600;
            color: #1e3a8a;
        }

        .form-control {
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #ccc;
        }

        #error-message {
            font-weight: bold;
            color: #dc2626;
            margin-top: 10px;
            display: none;
        }

        .btn-primary {
            background-color: #1e3a8a;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            color: #fff;
        }

        .container-fluid {
            padding: 0 15px;
        }

            
        .navbar {
          position: absolute;
          top: 0;
          left: 250px;
          width: calc(100% - 250px);
          background-color: #eeeeee !important; /* Couleur de la navbar */
          color: #d1d1d1; /* Texte gris */
          z-index: 3;
      }
    
    .main-content i {
      color: black !important;
  }
    

      .navbar-toggler-icon {
          background-color: #d1d1d1; /* Icône de menu en gris */
      }

      .navbar-nav .nav-link {
          color: #d1d1d1; /* Couleur des liens en gris */
      }

      .navbar-nav .nav-link:hover {
          color: #000000; /* Changement de couleur au survol */
      }

      .navbar .nav-item {
          display: flex;
          align-items: center;
      }

      .navbar .nav-item i {
          margin-right: 10px;
          color: #d1d1d1; /* Couleur gris pour les icônes */
      }

      .navbar .nav-item:hover i {
          color: #000000; /* Changement de couleur au survol */
      }

      .sidebar {
          height: 100vh;
          width: 250px;
          position: fixed;
          top: 0;
          left: 0;
          padding-top: 20px;
          overflow: hidden;
          text-align: center;
          background-color: #2c3e50; /* Couleur de fond de la sidebar */
      }

      .sidebar::before {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-image: url('https://media.istockphoto.com/id/1547533623/fr/photo/vue-a%C3%A9rienne-dun-paysage-rural.jpg?s=612x612&w=0&k=20&c=Bz9alSGdhWXekHzN4FpJc5vdqEOIUE7PojOItcn6FGY=');
          background-size: cover;
          background-position: center;
          background-repeat: no-repeat;
          filter: blur(3px);
          z-index: 1;
      }

      .sidebar::after {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.5);
          z-index: 2;
      }

      .sidebar a {
          position: relative;
          padding: 10px 15px;
          text-decoration: none;
          font-size: 18px;
          color: #d1d1d1;
          display: block;
          z-index: 3;
          text-align: left;
      }

      .sidebar a:hover, .sidebar a.selected {
          color: #ffffff;
          background-color: #a0a0a0;
      }

      .sidebar a.active {
          background-color: #50aa54;
          color: #ffffff;
      }

      .main-content {
          margin-left: 250px;
          padding: 20px;
          background-color: #eeeeee;
      }

      .logo {
          width: 150px;
          margin-bottom: 20px;
          position: relative;
          z-index: 3;
      }

      .sidebar .nav-item {
          display: flex;
          align-items: center;
      }

      .sidebar .nav-item i {
          margin-right: 10px;
      }

      /* Styles pour DataTables */
      .dataTables_wrapper {
          margin-top: 20px;
      }

      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
          margin: 10px 0;
      }

      .dataTables_wrapper .dataTables_paginate .paginate_button {
          padding: 5px 10px;
          margin: 0 2px;
          border: 1px solid #ddd;
          border-radius: 4px;
          background-color: #f8f9fa;
          color: #007bff;
      }

      .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
          background-color: #007bff;
          color: #fff;
          border-color: #007bff;
      }

      .dataTables_wrapper .dataTables_paginate .paginate_button.current {
          background-color: #007bff;
          color: #fff;
          border-color: #007bff;
      }

  
      /* Styles pour la carte */
      #map {
          height: 500px;
          width: 100%;
          border-radius: 8px;
          margin-top: 15px;
      }
      
      /* Styles pour les messages d'erreur */
      .error-message {
          color: #dc2626;
          font-weight: bold;
          margin-top: 10px;
          display: none;
      }
      
      /* Styles pour le sélecteur de type de carte */
      #map-type-selector {
          margin-top: 10px;
          width: 200px;
      }
      
      /* Styles pour les champs de formulaire */
      .form-control {
          margin-bottom: 10px;
      } 
      #map-container, #map-type-selector-container {
        transition: opacity 0.3s ease, transform 0.3s ease;
    }
    </style>


{% block javascripts %}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector('form.needs-validation');

            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();

                    let errorMessage = "Veuillez corriger les erreurs suivantes :\n";
                    const invalidFields = form.querySelectorAll(':invalid');
                    invalidFields.forEach(field => {
                        errorMessage += `- ${field.getAttribute('name')}: ${field.validationMessage}\n`;
                    });
                    alert(errorMessage);
                }
                form.classList.add('was-validated');
            }, false);

            {% if errors is defined and errors|length > 0 %}
                let serverErrorMessage = "Erreurs de validation :\n";
                {% for error in errors %}
                    serverErrorMessage += `- {{ error }}\n`;
                {% endfor %}
                alert(serverErrorMessage);
            {% endif %}
        });
    </script>
{% endblock %}

{% block body %}
    {% include 'backoffice/sidebar.html.twig' %}
    <main>
      <div class="main-content">
          <div class="container-fluid p-4">
              <div class="card shadow">
                  <div class="card-header bg-primary text-white py-3">
                      <h5 class="m-0"><i class="fas fa-plus-circle mr-2"></i>Ajouter un Entrepôt</h5>
                  </div>
                  <div class="card-body">
                      {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}

                      {% if form.vars.errors|length > 0 %}
                          <div class="alert alert-danger">
                              {{ form_errors(form) }}
                          </div>
                      {% endif %}

                      <div class="row g-4">
                          <div class="col-md-6">
                              {{ form_label(form.nom, 'Nom de l\'entrepôt', {'label_attr': {'class': 'form-label fw-semibold', 'style': 'color: #1e3a8a;'}}) }}
                              <div class="input-group has-validation shadow-sm">
                                  <span class="input-group-text" style="background-color: #dbeafe; color: #1e3a8a;">
                                      <i class="fas fa-warehouse"></i>
                                  </span>
                                  {{ form_widget(form.nom, {'attr': {'class': 'form-control border-0 rounded-end py-2', 'placeholder': 'Entrez le nom', 'style': 'background-color: #eff6ff;'}}) }}
                                  <div class="invalid-feedback" style="color: #dc2626;">
                                      {{ form_errors(form.nom) }}
                                  </div>
                              </div>
                          </div>

                          <div class="col-md-6">
                              {{ form_label(form.adresse, 'Adresse', {'label_attr': {'class': 'form-label fw-semibold', 'style': 'color: #065f46;'}}) }}
                              <div class="input-group has-validation shadow-sm">
                                  <span class="input-group-text" style="background-color: #d1fae5; color: #065f46;">
                                      <i class="fas fa-map-marker-alt"></i>
                                  </span>
                                  {{ form_widget(form.adresse, {'attr': {'class': 'form-control border-0 rounded-end py-2', 'placeholder': 'Entrez l\'adresse', 'style': 'background-color: #ecfdf5;'}}) }}
                                  <div class="invalid-feedback" style="color: #dc2626;">
                                      {{ form_errors(form.adresse) }}
                                  </div>
                              </div>
                          </div>

                          <div class="col-md-6">
                              {{ form_label(form.ville, 'Ville', {'label_attr': {'class': 'form-label fw-semibold', 'style': 'color: #6b21a8;'}}) }}
                              <div class="input-group has-validation shadow-sm">
                                  <span class="input-group-text" style="background-color: #ede9fe; color: #6b21a8;">
                                      <i class="fas fa-city"></i>
                                  </span>
                                  {{ form_widget(form.ville, {'attr': {'class': 'form-control border-0 rounded-end py-2', 'placeholder': 'Entrez la ville', 'style': 'background-color: #f5f3ff;'}}) }}
                                  <div class="invalid-feedback" style="color: #dc2626;">
                                      {{ form_errors(form.ville) }}
                                  </div>
                              </div>
                          </div>

                          <div class="col-md-6">
                              {{ form_label(form.espace, 'Espace (en m²)', {'label_attr': {'class': 'form-label fw-semibold', 'style': 'color: #c2410c;'}}) }}
                              <div class="input-group has-validation shadow-sm">
                                  <span class="input-group-text" style="background-color: #ffedd5; color: #c2410c;">
                                      <i class="fas fa-ruler-combined"></i>
                                  </span>
                                  {{ form_widget(form.espace, {'attr': {'class': 'form-control border-0 rounded-end py-2', 'placeholder': 'Entrez l\'espace', 'style': 'background-color: #fef7ee;'}}) }}
                                  <div class="invalid-feedback" style="color: #dc2626;">
                                      {{ form_errors(form.espace) }}
                                  </div>
                              </div>
                          </div>
                      </div>

                      <p id="error-message" class="text-danger mt-2" style="display: none;">Veuillez entrer une adresse et une ville valides !</p>

<div id="map-type-selector-container" class="form-group" style="display: none;">
    <label for="map-type-selector">Type de carte :</label>
    <select id="map-type-selector" class="form-control">
        <option value="OpenStreetMap">OpenStreetMap</option>
        <option value="Satellite">Satellite</option>
        <option value="Terrain">Terrain</option>
    </select>
</div>
<button id="zoom-max-button" class="btn btn-primary mt-3">
    <i class="fas fa-search-plus"></i> Zoomer au maximum
</button>

<div id="map-container" style="display: none; margin-top: 15px;">
    <div id="map" style="height: 500px; width: 100%;"></div>
</div>                          <div class="row g-4 mt-3">
                          <div class="col-md-6">
                              {{ form_label(form.latitude, 'Latitude', {'label_attr': {'class': 'form-label fw-semibold'}}) }}
                              {{ form_widget(form.latitude, {'attr': {'class': 'form-control', 'readonly': 'readonly'}}) }}
                          </div>
                          <div class="col-md-6">
                              {{ form_label(form.longitude, 'Longitude', {'label_attr': {'class': 'form-label fw-semibold'}}) }}
                              {{ form_widget(form.longitude, {'attr': {'class': 'form-control', 'readonly': 'readonly'}}) }}
                          </div>
                      </div>

                      <div class="row g-4 mt-3">
                          <div class="col-12 text-end">
                              <button type="submit" class="btn btn-primary shadow-sm">
                                  <i class="fas fa-save mr-2"></i>Enregistrer
                              </button>
                          </div>
                      </div>

                      {{ form_end(form) }}
                  </div>
              </div>
          </div>
      </div>
  </main>

    <!-- Script Leaflet corrigé -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
document.addEventListener("DOMContentLoaded", function () {
    // Récupérer les éléments du DOM
    const villeInput = document.getElementById("{{ form.ville.vars.id }}");
    const adresseInput = document.getElementById("{{ form.adresse.vars.id }}");
    const mapContainer = document.getElementById("map-container");
    const mapTypeSelectorContainer = document.getElementById("map-type-selector-container");
    const errorMessage = document.getElementById("error-message");
    const latitudeInput = document.getElementById("{{ form.latitude.vars.id }}");
    const longitudeInput = document.getElementById("{{ form.longitude.vars.id }}");
    const mapTypeSelector = document.getElementById("map-type-selector");
    const zoomMaxButton = document.getElementById("zoom-max-button"); // Bouton pour zoomer au maximum

    let map; // Variable pour stocker la carte Leaflet
    let marker; // Variable pour stocker le marqueur
    let baseLayers = {}; // Couches de base pour la carte

    // Écouteurs pour les champs ville et adresse
    villeInput.addEventListener("input", debounce(validateAddress, 300));
    adresseInput.addEventListener("input", debounce(validateAddress, 300));

    // Écouteur pour le sélecteur de type de carte
    if (mapTypeSelector) {
        mapTypeSelector.addEventListener("change", function () {
            const selectedLayer = baseLayers[this.value];
            if (selectedLayer) {
                map.eachLayer(layer => {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                selectedLayer.addTo(map);
            }
        });
    }

    // Écouteur pour le bouton de zoom maximum
    if (zoomMaxButton) {
        zoomMaxButton.addEventListener("click", function () {
            if (map) {
                map.setZoom(map.getMaxZoom()); // Zoomer au maximum
            }
        });
    }

    /**
     * Valider l'adresse et mettre à jour la carte
     */
    async function validateAddress() {
        const ville = villeInput.value.trim();
        const adresse = adresseInput.value.trim();

        // Vérifier si les champs ville et adresse sont remplis
        if (!ville || !adresse) {
            mapContainer.style.display = "none";
            mapTypeSelectorContainer.style.display = "none"; // Masquer le sélecteur de type de carte
            errorMessage.textContent = "Veuillez remplir les champs ville et adresse !";
            errorMessage.style.display = "block";
            latitudeInput.value = "";
            longitudeInput.value = "";
            return;
        }

        // Afficher la carte et le sélecteur de type de carte
        mapContainer.style.display = "block";
        mapTypeSelectorContainer.style.display = "block"; // Afficher le sélecteur de type de carte
        errorMessage.style.display = "none";

        // Construire la requête de géocodage
        const query = `${adresse}, ${ville}`;
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;

        try {
            // Faire une requête à l'API Nominatim
            const response = await fetch(url);
            const data = await response.json();

            // Vérifier si des résultats ont été trouvés
            if (data.length > 0) {
                const lat = parseFloat(data[0].lat);
                const lng = parseFloat(data[0].lon);

                // Mettre à jour les champs latitude et longitude
                latitudeInput.value = lat;
                longitudeInput.value = lng;

                // Initialiser ou mettre à jour la carte
                if (!map) {
                    // Initialiser la carte Leaflet
                    map = L.map('map').setView([lat, lng], 15); // Centrer sur les coordonnées trouvées

                    // Ajouter des couches de base
                    baseLayers = {
                        "OpenStreetMap": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '© OpenStreetMap contributors',
                            maxZoom: 19
                        }),
                        "Satellite": L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                            attribution: '© Esri',
                            maxZoom: 19
                        }),
                        "Terrain": L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
                            attribution: '© OpenTopoMap',
                            maxZoom: 17
                        })
                    };

                    // Ajouter la couche par défaut
                    baseLayers["OpenStreetMap"].addTo(map);

                    // Ajouter un marqueur
                    marker = L.marker([lat, lng], { draggable: true }).addTo(map);

                    // Écouteur pour le clic sur la carte
                    map.on('click', function (e) {
                        const newLat = e.latlng.lat;
                        const newLng = e.latlng.lng;

                        // Mettre à jour les champs latitude et longitude
                        latitudeInput.value = newLat.toFixed(6);
                        longitudeInput.value = newLng.toFixed(6);

                        // Déplacer le marqueur à la position cliquée
                        marker.setLatLng([newLat, newLng]);
                    });

                    // Écouteur pour le déplacement du marqueur
                    marker.on('dragend', function (e) {
                        const position = marker.getLatLng();
                        latitudeInput.value = position.lat.toFixed(6);
                        longitudeInput.value = position.lng.toFixed(6);
                    });
                } else {
                    // Mettre à jour la carte et le marqueur
                    map.setView([lat, lng], 15);
                    marker.setLatLng([lat, lng]);
                }
            } else {
                alert("Aucun résultat trouvé pour cette adresse.");
            }
        } catch (error) {
            console.error("Erreur lors de la recherche de l'adresse :", error);
            alert("Une erreur s'est produite lors de la recherche de l'adresse.");
        }
    }

    /**
     * Fonction debounce pour limiter les appels API
     * @param {Function} func - La fonction à exécuter
     * @param {number} wait - Le temps d'attente en millisecondes
     * @returns {Function} - La fonction debouncée
     */
    function debounce(func, wait) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
});
    </script>
        {% endblock %}
