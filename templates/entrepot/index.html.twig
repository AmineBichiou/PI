<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Dashboard - Gestion des Stocks</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="" name="keywords">
    <meta content="" name="description">

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap" rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <!-- Libraries Stylesheet -->
    <link href="{{ asset('lib/lightbox/css/lightbox.min.css') }}" rel="stylesheet">
    <link href="{{ asset('lib/owlcarousel/assets/owl.carousel.min.css') }}" rel="stylesheet">

    <!-- Customized Bootstrap Stylesheet -->
    <link href="{{ asset('css/bootstrap.min.css') }}" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="{{ asset('css/style.css') }}" rel="stylesheet">
    <link href="{{ asset('css/sidebar.css') }}" rel="stylesheet">

    <!-- DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">

    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Bootstrap JS (avec Popper.js) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

{% block stylesheets %}
    <style>
        html, body {
            height: 100%;
            background-color: #eeeeee;
        }

        .navbar {
            position: absolute;
            top: 0;
            left: 250px;
            width: calc(100% - 250px);
            background-color: #eeeeee !important;
            color: #d1d1d1;
            z-index: 3;
        }

        .navbar-toggler-icon {
            background-color: #d1d1d1;
        }

        .navbar-nav .nav-link {
            color: #d1d1d1;
        }

        .navbar-nav .nav-link:hover {
            color: #000000;
        }

        .navbar .nav-item {
            display: flex;
            align-items: center;
        }

        .navbar .nav-item i {
            margin-right: 10px;
            color: #d1d1d1;
        }

        .navbar .nav-item:hover i {
            color: #000000;
        }

        .sidebar {
            height: 100vh;
            width: 250px;
            position: fixed;
            top: 0;
            left: 0;
            padding-top: 20px;
            overflow: hidden;
            text-align: center;
            background-color: #2c3e50;
        }

        .sidebar::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url('https://media.istockphoto.com/id/1547533623/fr/photo/vue-a%C3%A9rienne-dun-paysage-rural.jpg?s=612x612&w=0&k=20&c=Bz9alSGdhWXekHzN4FpJc5vdqEOIUE7PojOItcn6FGY=');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            filter: blur(3px);
            z-index: 1;
        }

        .sidebar::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2;
        }

        .sidebar a {
            position: relative;
            padding: 10px 15px;
            text-decoration: none;
            font-size: 18px;
            color: #d1d1d1;
            display: block;
            z-index: 3;
            text-align: left;
        }

        .sidebar a:hover, .sidebar a.selected {
            color: #ffffff;
            background-color: #a0a0a0;
        }

        .sidebar a.active {
            background-color: #50aa54;
            color: #ffffff;
        }

        .main-content {
            margin-left: 250px;
            padding: 20px;
            background-color: #eeeeee;
        }

        .logo {
            width: 150px;
            margin-bottom: 20px;
            position: relative;
            z-index: 3;
        }

        .sidebar .nav-item {
            display: flex;
            align-items: center;
        }

        .sidebar .nav-item i {
            margin-right: 10px;
        }

        .dataTables_wrapper {
            margin-top: 20px;
        }

        .dataTables_wrapper .dataTables_length,
        .dataTables_wrapper .dataTables_filter,
        .dataTables_wrapper .dataTables_info,
        .dataTables_wrapper .dataTables_paginate {
            margin: 10px 0;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            padding: 5px 10px;
            margin: 0 2px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f8f9fa;
            color: #007bff;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }

        .btn {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        #entrepot-table tbody tr {
            transition: background-color 0.3s ease;
        }

        #entrepot-table tbody tr:hover {
            background-color: #f8f9fa;
        }

        .badge {
            font-size: 0.9em;
            margin: 2px;
        }

        .card {
            border: none;
            border-radius: 10px;
            overflow: hidden;
        }

        .card-body {
            padding: 1.5rem;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button.current {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }

        .dataTables_filter {
            display: none;
        }

        .input-group-text i {
            color: black;
        }

        .dropdown-menu {
            position: absolute;
            will-change: transform;
            top: 100%;
            right: 0;
            z-index: 1000;
            min-width: 300px;
            padding: 1rem;
            background-color: white;
            border: 1px solid #ddd;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .dropdown {
            position: relative;
            overflow: visible;
        }

        .btn-primary, .btn-success, .btn-warning {
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

        .btn-success:hover {
            background-color: #218838;
            border-color: #1e7e34;
        }

        .btn-warning:hover {
            background-color: #e0a800;
            border-color: #d39e00;
        }

        .gap-2 {
            gap: 0.5rem;
        }

        #main-map {
          height: 500px;
          width: 100%;
          border-radius: 8px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
          transition: box-shadow 0.3s ease;
      }
      
      #main-map:hover {
          box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
      }
      
      .mini-map {
          height: 100px; /* Hauteur des mini-cartes */
          width: 150px;  /* Largeur des mini-cartes */
      }
      /* Ajouter des transitions pour les boutons */
.btn {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

/* Animation pour les cartes */
.card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

/* Animation pour les éléments de la sidebar */
.sidebar a {
    transition: background-color 0.3s ease, color 0.3s ease;
}

.sidebar a:hover {
    background-color: #a0a0a0;
    color: #ffffff;
}
/* Styles pour le bouton de sélection des couches de carte */
/* Styles pour le conteneur des options de couches */
.leaflet-control-layers {
    background-color: #ffffff; /* Fond blanc */
    border: 2px solid #1e3a8a; /* Bordure bleue */
    border-radius: 8px; /* Coins arrondis */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre */
    padding: 10px; /* Espace intérieur */
}

/* Styles pour les labels des options */
.leaflet-control-layers label {
    color: #1e3a8a; /* Texte bleu */
    font-weight: 600; /* Texte en gras */
    margin-bottom: 5px; /* Espace entre les options */
    display: flex; /* Aligner la case et le texte */
    align-items: center; /* Centrer verticalement */
}

/* Styles pour les cases à cocher */
.leaflet-control-layers input[type="radio"],
.leaflet-control-layers input[type="checkbox"] {
    margin-right: 8px; /* Espace entre la case et le texte */
    accent-color: #1e3a8a; /* Couleur de la case */
}

/* Styles pour le bouton de bascule (toggle) */
.leaflet-control-layers-toggle {
    background-color: #1e3a8a; /* Fond bleu */
    color: #ffffff; /* Texte blanc */
    border-radius: 8px; /* Coins arrondis */
    padding: 8px 12px; /* Espace intérieur */
    font-size: 16px; /* Taille de la police */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre */
    border: none; /* Supprimer la bordure par défaut */
    cursor: pointer; /* Curseur pointer */
}

/* Styles au survol du bouton de bascule */
.leaflet-control-layers-toggle:hover {
    background-color: #0f2c6e; /* Fond bleu foncé au survol */
}  
/* Styles pour le conteneur des options de couches */
.leaflet-control-layers {
    background-color: #ffffff; /* Fond blanc */
    border: 2px solid #1e3a8a; /* Bordure bleue */
    border-radius: 8px; /* Coins arrondis */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre */
    padding: 10px; /* Espace intérieur */
}

/* Styles pour les labels des options */
.leaflet-control-layers label {
    color: #1e3a8a; /* Texte bleu */
    font-weight: 600; /* Texte en gras */
    margin-bottom: 5px; /* Espace entre les options */
    display: flex; /* Aligner la case et le texte */
    align-items: center; /* Centrer verticalement */
}

/* Styles pour les cases à cocher */
.leaflet-control-layers input[type="radio"],
.leaflet-control-layers input[type="checkbox"] {
    margin-right: 8px; /* Espace entre la case et le texte */
    accent-color: #1e3a8a; /* Couleur de la case */
}

/* Styles pour le bouton de bascule (toggle) */
.leaflet-control-layers-toggle {
    background-color: #1e3a8a; /* Fond bleu */
    color: #ffffff; /* Texte blanc */
    border-radius: 8px; /* Coins arrondis */
    padding: 8px 12px; /* Espace intérieur */
    font-size: 16px; /* Taille de la police */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre */
    border: none; /* Supprimer la bordure par défaut */
    cursor: pointer; /* Curseur pointer */
}

/* Styles au survol du bouton de bascule */
.leaflet-control-layers-toggle:hover {
    background-color: #0f2c6e; /* Fond bleu foncé au survol */
}
  </style>
{% endblock %}

{% block body %}
    {% include 'backoffice/sidebar.html.twig' %}
    <main>
        <div class="main-content">
            <!-- Titre et boutons -->
              <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="text-3xl">Gestion des Entrepots</h1>
                <div class="btn-group">
                    <a href="{{ path('app_entrepot_new') }}" class="btn btn-primary"><i class="fas fa-plus me-2"></i> Ajouter</a>
                    <a href="{{ path('export_excel_entrepot') }}" class="btn btn-success"><i class="fas fa-download me-2"></i> Excel</a>
                    <a href="{{ path('export_pdf_entrepot') }}" class="btn btn-warning"><i class="fas fa-file-pdf me-2"></i> PDF</a>
                </div>
            </div>

            <!-- Notifications flash -->
            {% for message in app.flashes('success') %}
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}

            <!-- Filtres et recherche -->
            <div class="card shadow-sm mb-4" style="overflow: visible;">
                <div class="card-body" style="overflow: visible;">
                    <div class="row g-3 align-items-center">
                        <!-- Champ de recherche -->
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" id="entrepot-search" class="form-control" placeholder="Rechercher un entrepôt...">
                            </div>
                        </div>

                        <!-- Bouton Filtre -->
                        <div class="col-md-8 d-flex justify-content-end">
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-filter"></i> Filtres
                                </button>
                                <div class="dropdown-menu dropdown-menu-end p-3" aria-labelledby="filterDropdown">
                                    <!-- Filtre par ville -->
                                    <div class="mb-3">
                                        <label for="filter-ville" class="form-label"><i class="fas fa-city me-2"></i> Ville</label>
                                        <select id="filter-ville" class="form-control">
                                            <option value="">Toutes les villes</option>
                                            {% for entrepot in entrepots %}
                                                {% if entrepot.ville %}
                                                    <option value="{{ entrepot.ville }}">{{ entrepot.ville }}</option>
                                                {% endif %}
                                            {% endfor %}
                                        </select>
                                    </div>

                                    <!-- Filtre par espace -->
                                    <div class="mb-3">
                                        <label for="filter-espace" class="form-label"><i class="fas fa-ruler me-2"></i> Espace minimum</label>
                                        <input type="number" id="filter-espace" class="form-control" placeholder="Espace en m²">
                                    </div>

                                    <!-- Bouton de réinitialisation -->
                                    <div class="d-grid">
                                        <button id="reset-filters" class="btn btn-secondary">
                                            <i class="fas fa-sync me-2"></i> Réinitialiser les filtres
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tableau des entrepôts -->
            <div class="card shadow-sm">
                <div class="card-body">
                    <table id="entrepot-table" class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Nom</th>
                                <th>Adresse</th>
                                <th>Ville</th>
                                <th>Espace (m²)</th>
                                <th>Carte</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for entrepot in entrepots %}
                                <tr data-lat="{{ entrepot.latitude }}" data-lng="{{ entrepot.longitude }}" data-ville="{{ entrepot.ville }}" data-espace="{{ entrepot.espace }}">
                                    <td>{{ entrepot.id }}</td>
                                    <td>{{ entrepot.nom }}</td>
                                    <td>{{ entrepot.adresse }}</td>
                                    <td>{{ entrepot.ville ?? 'N/A' }}</td>
                                    <td>{{ entrepot.espace }}</td>
                                    <td>
                                      <div id="mini-map-{{ entrepot.id }}" class="mini-map"></div>
                                    </td>                                    <td>
                                        <div class="d-flex gap-2">
                                            <a href="{{ path('app_entrepot_edit', { id: entrepot.id }) }}" class="btn btn-sm btn-warning">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <form action="{{ path('app_entrepot_delete', { id: entrepot.id }) }}" method="post" class="d-inline">
                                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ entrepot.id) }}">
                                                <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cet entrepôt ?')">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Carte principale -->
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h5 class="card-title">Carte des Entrepôts</h5>
                    <div id="main-map"></div>
                </div>
            </div>
        </div>
    </main>

    <!-- Scripts -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Initialisation de la carte principale
        const mainMap = L.map('main-map').setView([33.8869, 9.5375], 6); // Centré sur la Tunisie
    
        // Ajout des couches de base
        const baseLayers = {
          "OpenStreetMap": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              attribution: '© OpenStreetMap contributors'
          }),
          "Satellite": L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
              attribution: '© Esri'
          }),
          "Terrain": L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
              attribution: '© OpenTopoMap'
          })        };
    
        // Ajouter la couche par défaut
        baseLayers["OpenStreetMap"].addTo(mainMap);
    
        // Ajouter un contrôle pour sélectionner les couches
        L.control.layers(baseLayers).addTo(mainMap);
    
        let mainMarkers = []; // Pour stocker les marqueurs de la carte principale
    
        // Initialisation des mini-cartes pour chaque entrepôt
        const rows = document.querySelectorAll("#entrepot-table tbody tr");
        rows.forEach(row => {
            const lat = parseFloat(row.getAttribute("data-lat"));
            const lng = parseFloat(row.getAttribute("data-lng"));
            const id = row.querySelector("td:first-child").textContent;
    
            if (!isNaN(lat) && !isNaN(lng)) {
                // Initialiser la mini-carte
                const miniMap = L.map(`mini-map-${id}`, {
                    center: [lat, lng],
                    zoom: 13,
                    zoomControl: false,
                    dragging: false,
                    scrollWheelZoom: false,
                    doubleClickZoom: false,
                    boxZoom: false,
                    keyboard: false,
                    touchZoom: false
                });
    
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(miniMap);
    
                // Ajouter un marqueur à la mini-carte
                L.marker([lat, lng]).addTo(miniMap);
    
                // Ajouter un marqueur à la carte principale
                const mainMarker = L.marker([lat, lng]).addTo(mainMap);
                mainMarker.bindPopup(`<strong>${row.cells[1].textContent}</strong><br>${row.cells[2].textContent}`);
                mainMarkers.push(mainMarker);
    
                // Zoom sur la carte principale au clic sur la ligne
                row.addEventListener("click", () => {
                    mainMap.setView([lat, lng], 15); // Zoom sur l'emplacement
                    mainMarker.openPopup(); // Ouvrir le popup du marqueur
                });
            }
        });
    
        // Filtres et recherche
        const searchInput = document.getElementById("entrepot-search");
        const villeFilter = document.getElementById("filter-ville");
        const espaceFilter = document.getElementById("filter-espace");
        const resetFilterButton = document.getElementById("reset-filters");
        const entrepotTable = document.getElementById("entrepot-table");
        const tableRows = entrepotTable.querySelector("tbody").getElementsByTagName("tr");
    
        // Fonction de filtrage
        function filterTable() {
            const searchValue = searchInput.value.trim().toLowerCase();
            const villeValue = villeFilter.value.trim().toLowerCase();
            const espaceValue = espaceFilter.value.trim();
    
            Array.from(tableRows).forEach(row => {
                const rowVille = (row.getAttribute("data-ville") || "").trim().toLowerCase();
                const rowEspace = parseFloat(row.getAttribute("data-espace")) || 0;
                const cells = row.getElementsByTagName("td");
    
                const matchesSearch = searchValue === "" || Array.from(cells).some(cell =>
                    (cell.textContent || "").trim().toLowerCase().includes(searchValue)
                );
    
                const matchesVille = villeValue === "" || rowVille === villeValue;
    
                let matchesEspace = true;
                if (espaceValue !== "") {
                    if (!isNaN(espaceValue)) {
                        matchesEspace = rowEspace >= parseFloat(espaceValue);
                    } else {
                        const intervalMatch = espaceValue.match(/^(\d+)-(\d+)$/);
                        if (intervalMatch) {
                            const min = parseFloat(intervalMatch[1]);
                            const max = parseFloat(intervalMatch[2]);
                            matchesEspace = rowEspace >= min && rowEspace <= max;
                        }
                    }
                }
    
                row.style.display = (matchesSearch && matchesVille && matchesEspace) ? "" : "none";
            });
    
            updateMainMap(); // Mettre à jour la carte principale après filtrage
        }
    
        // Écouteurs pour les filtres
        searchInput.addEventListener("input", filterTable);
        villeFilter.addEventListener("change", filterTable);
        espaceFilter.addEventListener("input", filterTable);
    
        resetFilterButton.addEventListener("click", function () {
            searchInput.value = "";
            villeFilter.value = "";
            espaceFilter.value = "";
            filterTable();
        });
    
        // Fonction pour mettre à jour les marqueurs de la carte principale
        function updateMainMap() {
            // Supprimer tous les marqueurs existants
            mainMarkers.forEach(marker => mainMap.removeLayer(marker));
            mainMarkers = [];
    
            // Récupérer les lignes visibles après filtrage
            const visibleRows = Array.from(rows).filter(row => row.style.display !== "none");
            const bounds = [];
    
            // Ajouter des marqueurs pour les lignes visibles
            visibleRows.forEach(row => {
                const lat = parseFloat(row.getAttribute("data-lat"));
                const lng = parseFloat(row.getAttribute("data-lng"));
    
                if (!isNaN(lat) && !isNaN(lng)) {
                    const marker = L.marker([lat, lng]).addTo(mainMap);
                    marker.bindPopup(`<strong>${row.cells[1].textContent}</strong><br>${row.cells[2].textContent}`);
                    mainMarkers.push(marker);
                    bounds.push([lat, lng]);
                }
            });
    
            // Ajuster la vue de la carte principale pour inclure tous les marqueurs visibles
            if (bounds.length > 0) {
                mainMap.fitBounds(bounds);
            } else {
                mainMap.setView([33.8869, 9.5375], 6); // Retour à la vue par défaut si aucun entrepôt visible
            }
        }
    
        // Appliquer le filtrage initial et mettre à jour la carte
        filterTable();
    });
      </script>
{% endblock %}